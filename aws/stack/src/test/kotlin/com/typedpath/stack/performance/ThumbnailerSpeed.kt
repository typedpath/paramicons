package com.typedpath.stack.performance

import io.ktor.client.HttpClient
import io.ktor.client.call.*
import io.ktor.client.engine.cio.CIO
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.util.reflect.*
import kotlinx.coroutines.*
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking

suspend fun speedTest(client: HttpClient=HttpClient(CIO) , url: String,  concurrents: Int, targetCalls: Int) {
    var id = "PolarRadialCon2.0"
    val params =
        """{"rotationalFrequency":19,"radialFrequency":10,"angleDegrees":90,"unit":300,"clipRadius":600,"loading":true,"spokeAngle0":300,"spokeAngle1":60,"spokeUnit":400,"fillColours":["#BFFF91","#2C4E31","#82A882","#8AD6B0","#183321","#0A6441","#152FC3"],"pageWidth":300,"pageHeight":300,"radialColourGradient":true,"highlightedProperty":"radialFrequency"}"""
    val svg =
        """<svg height="600" viewBox="-600 -600 1200 1200" width="600" fill-rule="evenodd" xmlns="http://www.w3.org/2000/svg"><clipPath id="clipPath14822"><circle cx="0" cy="0" r="600"></circle></clipPath><defs><radialGradient id="gradient68581"><stop offset="14.285714285714286%" stop-color="#BFFF91"></stop><stop offset="28.571428571428573%" stop-color="#2C4E31"></stop><stop offset="42.857142857142854%" stop-color="#82A882"></stop><stop offset="57.142857142857146%" stop-color="#8AD6B0"></stop><stop offset="71.42857142857143%" stop-color="#183321"></stop><stop offset="85.71428571428571%" stop-color="#0A6441"></stop><stop offset="100%" stop-color="#152FC3"></stop></radialGradient></defs><path clip-path="url(#clipPath14822)" id="onlyme" fill="url(#gradient68581)" stroke="black" fill-rule="evenodd" d=" M -30 0 A 30 30, 0, 1, 0, 30 0 A 30 30, 0, 1, 0, -30 0  M -60 0 A 60 60, 0, 1, 0, 60 0 A 60 60, 0, 1, 0, -60 0  M -90 0 A 90 90, 0, 1, 0, 90 0 A 90 90, 0, 1, 0, -90 0  M -120 0 A 120 120, 0, 1, 0, 120 0 A 120 120, 0, 1, 0, -120 0  M -150 0 A 150 150, 0, 1, 0, 150 0 A 150 150, 0, 1, 0, -150 0  M -180 0 A 180 180, 0, 1, 0, 180 0 A 180 180, 0, 1, 0, -180 0  M -210 0 A 210 210, 0, 1, 0, 210 0 A 210 210, 0, 1, 0, -210 0  M -240 0 A 240 240, 0, 1, 0, 240 0 A 240 240, 0, 1, 0, -240 0  M -270 0 A 270 270, 0, 1, 0, 270 0 A 270 270, 0, 1, 0, -270 0  M -300 0 A 300 300, 0, 1, 0, 300 0 A 300 300, 0, 1, 0, -300 0  M0, 0 C-173.20508075688772,100.00000000000003 -173.2050807568877,299.99999999999994 0,400 M0, 0 C173.20508075688772,100.00000000000003 173.2050807568877,299.99999999999994 0,400 M0, 0 C-131.35040480954686,150.82132195537926 -66.4105109686102,339.98477029550617 129.87978768187338,378.32689668025387 M0, 0 C196.29029865048358,38.3421263847477 261.2301924914202,227.50557472487458 129.87978768187338,378.32689668025387 M0, 0 C-75.26187438956707,185.29881344296038 47.5806681483665,343.12691532223903 245.68508507586714,315.6562037585574 M0, 0 C198.10441692750067,-27.470711563681583 320.9469594654342,130.35739031559703 245.68508507586714,315.6562037585574 M0, 0 C-11.01755207117305,199.69630328666327 156.4157435813326,309.0859349111486 334.8665913050114,218.77926324897078 M0, 0 C178.45084772367883,-90.30667166217783 345.88414337618445,19.082959962307513 334.8665913050114,218.77926324897078 M0, 0 C54.42069296906704,192.45360006185007 248.30074615693306,241.55069749000995 387.76010637573216,98.1941948563197 M0, 0 C139.45936021879913,-143.3565026336902 333.33941340666513,-94.25940520553037 387.76010637573216,98.1941948563197 M0, 0 C113.96161150205329,164.35556304504902 313.2785101033872,147.83969395058259 398.63379720266795,-33.031738188932906 M0, 0 C85.35528709928076,-180.8714321395155 284.67218570061465,-197.3873012339819 398.63379720266795,-33.031738188932906 M0, 0 C161.15302113219568,118.44705053299596 344.30768646320706,38.10796560240212 366.30933066202294,-160.67816986118777 M0, 0 C22.001644198815885,-198.7861354635899 205.15630952982727,-279.1252203941837 366.30933066202294,-160.67816986118777 M0, 0 C190.8810003759015,59.70296220033885 338.0257825105277,-75.7533521248092 294.2895642692527,-270.91262865029637 M0, 0 C-43.73621824127515,-195.15927652548712 103.40856389335124,-330.6155908506354 294.2895642692527,-270.91262865029637 M0, 0 C199.92406140499028,-5.510868473632295 295.1135400124051,-181.4056187149302 190.37895721482948,-351.7895004825956 M0, 0 C-104.73458279757557,-170.3838817676654 -9.5451041901608,-346.2786320089631 190.37895721482948,-351.7895004825956 M0, 0 C187.30224823941091,-70.12751103855095 220.22116629555768,-267.3997717190952 65.83783611229362,-394.5445213610889 M0, 0 C-154.38333018326418,-127.1447496419936 -121.46441212711736,-324.4170103225381 65.83783611229362,-394.5445213610889 M0, 0 C154.38333018326423,-127.14474964199354 121.46441212711746,-324.41701032253815 -65.83783611229352,-394.544521361089 M0, 0 C-187.30224823941094,-70.12751103855088 -220.22116629555762,-267.39977171909527 -65.83783611229352,-394.544521361089 M0, 0 C104.7345827975755,-170.38388176766546 9.545104190161027,-346.27863200896314 -190.37895721482926,-351.7895004825957 M0, 0 C-199.92406140499028,-5.51086847363257 -295.1135400124049,-181.4056187149303 -190.37895721482926,-351.7895004825957 M0, 0 C43.73621824127524,-195.15927652548712 -103.40856389335119,-330.6155908506354 -294.28956426925265,-270.9126286502964 M0, 0 C-190.88100037590146,59.70296220033893 -338.0257825105277,-75.75335212480928 -294.28956426925265,-270.9126286502964 M0, 0 C-22.001644198815963,-198.7861354635899 -205.15630952982744,-279.12522039418366 -366.30933066202306,-160.67816986118763 M0, 0 C-161.15302113219562,118.44705053299603 -344.30768646320706,38.10796560240226 -366.30933066202306,-160.67816986118763 M0, 0 C-85.35528709928067,-180.87143213951552 -284.6721857006146,-197.38730123398207 -398.63379720266795,-33.0317381889331 M0, 0 C-113.96161150205334,164.35556304504894 -313.27851010338725,147.83969395058242 -398.63379720266795,-33.0317381889331 M0, 0 C-139.45936021879916,-143.35650263369018 -333.33941340666513,-94.25940520553053 -387.7601063757322,98.19419485631951 M0, 0 C-54.42069296906714,192.45360006185004 -248.30074615693317,241.55069749000978 -387.7601063757322,98.19419485631951 M0, 0 C-178.45084772367878,-90.30667166217792 -345.8841433761847,19.0829599623074 -334.8665913050115,218.77926324897064 M0, 0 C11.017552071172952,199.69630328666327 -156.41574358133266,309.08593491114834 -334.8665913050115,218.77926324897064 M0, 0 C-198.10441692750067,-27.470711563681505 -320.94695946543425,130.3573903155973 -245.68508507586694,315.6562037585576 M0, 0 C75.26187438956714,185.29881344296032 -47.58066814836624,343.1269153222389 -245.68508507586694,315.6562037585576 M0, 0 C-196.2902986504836,38.34212638474765 -261.23019249142015,227.50557472487444 -129.8797876818735,378.32689668025387 M0, 0 C131.35040480954677,150.82132195537935 66.41051096861014,339.98477029550656 -129.8797876818735,378.32689668025387"></path><animateTransform attributeType="xml" attributeName="transform" type="rotate" from="360 8.4 9.5" to="0 8.4 9.5" dur="5.0s" additive="sum" repeatCount="indefinite"></animateTransform></svg>"""
    val jobs = mutableListOf<Job>()
    val start = System.currentTimeMillis()
    for (  i in 0..targetCalls) {
        val job = GlobalScope.launch {
            val start = System.currentTimeMillis()
            val response: HttpResponse = client.post() {
                url(url)
                parameter("id", id)
                parameter("params", params)
                setBody(svg)
                contentType(ContentType.Text.Plain)
            }
            val timeTaken = System.currentTimeMillis() - start
            println("timeTaken = $timeTaken,  result: ${response.body<String>()}")
        }
        jobs.add(job)
    }
    jobs.joinAll()
    println("completed $targetCalls in ${System.currentTimeMillis()-start}ms")
}

val url="https://paramicons.testedsoftware.org/share/svgthumbnail"

fun main() {

    runBlocking {
        speedTest(url=url, targetCalls = 1000, concurrents = 1)
    }
    readln()
}